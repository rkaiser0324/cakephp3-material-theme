; General settings control basic behavior of the plugin
;
; * cacheConfig - set to true to cache the parsed configuration data
;   so it doesn't get parsed on each request.
;
; * alwaysEnableController - Set to true to always enable the
;   AssetsController. Generally you will want to disable the controller
;   in production, as it could allow an attacker to request expensive
;   resources repeatedly. However, if you need the controller available
;   in production. You can enable this flag.
;
; * themes - Define which plugins are themes. Theme plugins will be scanned
;   for asset files when building targets containing themed files.
;

[General]
cacheConfig = false
alwaysEnableController = false

[filter_PostCSS]
options = '-u autoprefixer --autoprefixer.browsers "> 5%" -u cssnano'

[filter_Uglifyjs]
node_path = "/root/.nvm/versions/node/v11.9.0/bin/"
node = "/root/.nvm/versions/node/v11.9.0/bin/node"
options = "-m"

[filter_ScssFilter]
path = "/root/.nvm/versions/node/v11.9.0/bin/"
sass = "/root/.nvm/versions/node/v11.9.0/bin/sass"

; Define an extension type.
;
; _filters, _targets and other keys prefixed with this value
; are connected when the ini file is parsed.
;
; * cachePath - is where built files will be output
; * timestamp - Set to true to add a timestamp to build files.
; * paths - An array of paths where files used in builds can be found
;   Supports glob expressions.
; * filters - A list of filters to be applied to all build files
;   using this extension.
; * baseUrl - Set the base url this type of asset is served off of, good
;   for using with CDN's
[js]
baseUrl =
timestamp = true
paths[] = WEBROOT/assets/javascripts/**/*
paths[] = WEBROOT/assets/components/**/*
paths[] = WEBROOT/assets/components_premium/**/*
paths[] = WEBROOT/assets/javascripts/*
paths[] = WEBROOT/assets/components_premium/con-material-adui/src/app/assets/jquery
cachePath = WEBROOT/js
;filters[] = Sprockets
filters[] = Uglifyjs

; Each target should have a section defining the files
; everything after js_* is considered the build file.
; all files included in the build are relative to the parent
; paths key.
;
; targets can include their own filters.
[application.js]
files[] = application.js

[public.js]
files[] = public.js

[full_screen.js]
files[] = full_screen.js

; Create the CSS extension
[css]
paths[] = WEBROOT/assets/stylesheets/**/*
paths[] = WEBROOT/assets/components/**/*
paths[] = WEBROOT/assets/components_premium/**/*
paths[] = WEBROOT/assets/components_premium/con-material-adui/src/app/assets/nanoScroller/*
paths[] = WEBROOT/assets/components_premium/con-material-adui/src/app/assets/font-awesome/css/*
paths[] = WEBROOT/assets/components_premium/con-material-adui/src/app/assets/material-design-icons/css/*
paths[] = WEBROOT/assets/components_premium/con-material-adui/src/app/assets/ionicons/css/*
paths[] = WEBROOT/assets/components_premium/con-material-adui/src/app/assets/weatherIcons/css/*
paths[] = WEBROOT/assets/stylesheets/*

cachePath = WEBROOT/css
timestamp = true
filters[] = ScssFilter
; filters[] = PostCSS

[cake_default.css]
files[] = error/base.css
files[] = error/cake.css

[application.css]
files[] = nanoscroller.css
files[] = font-awesome.min.css
files[] = material-design-icons.min.css
files[] = ionicons.min.css
files[] = weather-icons.min.css
files[] = application.scss

[public.css]
files[] = nanoscroller.css
files[] = font-awesome.min.css
files[] = material-design-icons.min.css
files[] = ionicons.min.css
files[] = weather-icons.min.css
files[] = public.scss

[full_screen.css]
files[] = nanoscroller.css
files[] = font-awesome.min.css
files[] = material-design-icons.min.css
files[] = ionicons.min.css
files[] = weather-icons.min.css
files[] = full_screen.scss
